   1) Stk [
   1: NSupercomb main
 ]
 Heap [
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  16: NSupercomb MkPair
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   3: NSupercomb myPair
   2: NSupercomb myFst
   1: NSupercomb main
 ]
 Dump [
 ]

   2) Stk [
   1: NAp   39    2 (NSupercomb myFst)
 ]
 Heap [
   1: NAp   39    2 (NSupercomb myFst)
  39: NAp   37    3 (NSupercomb myPair)
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  16: NSupercomb MkPair
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   3: NSupercomb myPair
   2: NSupercomb myFst
 ]
 Dump [
 ]

   3) Stk [
  39: NAp   37    3 (NSupercomb myPair)
   1: NAp   39    2 (NSupercomb myFst)
 ]
 Heap [
   1: NAp   39    2 (NSupercomb myFst)
  39: NAp   37    3 (NSupercomb myPair)
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  16: NSupercomb MkPair
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   3: NSupercomb myPair
   2: NSupercomb myFst
 ]
 Dump [
 ]

   4) Stk [
  37: Primitive: casePair CasePair
  39: NAp   37    3 (NSupercomb myPair)
   1: NAp   39    2 (NSupercomb myFst)
 ]
 Heap [
   1: NAp   39    2 (NSupercomb myFst)
  39: NAp   37    3 (NSupercomb myPair)
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  16: NSupercomb MkPair
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   3: NSupercomb myPair
   2: NSupercomb myFst
 ]
 Dump [
 ]

   5) Stk [
   3: NSupercomb myPair
 ]
 Heap [
   1: NAp   39    2 (NSupercomb myFst)
  39: NAp   37    3 (NSupercomb myPair)
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  16: NSupercomb MkPair
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   3: NSupercomb myPair
   2: NSupercomb myFst
 ]
 Dump [
Stk [
  37: Primitive: casePair CasePair
  39: NAp   37    3 (NSupercomb myPair)
   1: NAp   39    2 (NSupercomb myFst)
 ]
 ]

   6) Stk [
   3: NAp   41   42 (NNum 4)
 ]
 Heap [
   3: NAp   41   42 (NNum 4)
  42: NNum 4
  41: NAp   16   40 (NNum 3)
  40: NNum 3
   1: NAp   39    2 (NSupercomb myFst)
  39: NAp   37    3 (NAp 41 42)
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  16: NSupercomb MkPair
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   2: NSupercomb myFst
 ]
 Dump [
Stk [
  37: Primitive: casePair CasePair
  39: NAp   37    3 (NAp 41 42)
   1: NAp   39    2 (NSupercomb myFst)
 ]
 ]

   7) Stk [
  41: NAp   16   40 (NNum 3)
   3: NAp   41   42 (NNum 4)
 ]
 Heap [
   3: NAp   41   42 (NNum 4)
  42: NNum 4
  41: NAp   16   40 (NNum 3)
  40: NNum 3
   1: NAp   39    2 (NSupercomb myFst)
  39: NAp   37    3 (NAp 41 42)
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  16: NSupercomb MkPair
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   2: NSupercomb myFst
 ]
 Dump [
Stk [
  37: Primitive: casePair CasePair
  39: NAp   37    3 (NAp 41 42)
   1: NAp   39    2 (NSupercomb myFst)
 ]
 ]

   8) Stk [
  16: NSupercomb MkPair
  41: NAp   16   40 (NNum 3)
   3: NAp   41   42 (NNum 4)
 ]
 Heap [
   3: NAp   41   42 (NNum 4)
  42: NNum 4
  41: NAp   16   40 (NNum 3)
  40: NNum 3
   1: NAp   39    2 (NSupercomb myFst)
  39: NAp   37    3 (NAp 41 42)
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  16: NSupercomb MkPair
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   2: NSupercomb myFst
 ]
 Dump [
Stk [
  37: Primitive: casePair CasePair
  39: NAp   37    3 (NAp 41 42)
   1: NAp   39    2 (NSupercomb myFst)
 ]
 ]

   9) Stk [
  16: Primitive: Pack PrimConstr {t = 1, a = 2}
  41: NAp   16   40 (NNum 3)
   3: NAp   41   42 (NNum 4)
 ]
 Heap [
  16: Primitive: Pack PrimConstr {t = 1, a = 2}
   3: NAp   41   42 (NNum 4)
  42: NNum 4
  41: NAp   16   40 (NNum 3)
  40: NNum 3
   1: NAp   39    2 (NSupercomb myFst)
  39: NAp   37    3 (NAp 41 42)
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   2: NSupercomb myFst
 ]
 Dump [
Stk [
  37: Primitive: casePair CasePair
  39: NAp   37    3 (NAp 41 42)
   1: NAp   39    2 (NSupercomb myFst)
 ]
 ]

  10) Stk [
   3: NData: 1  40 42 
 ]
 Heap [
   3: NData: 1  40 42 
  16: Primitive: Pack PrimConstr {t = 1, a = 2}
  42: NNum 4
  41: NAp   16   40 (NNum 3)
  40: NNum 3
   1: NAp   39    2 (NSupercomb myFst)
  39: NAp   37    3 (NData: 1  40 42 )
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   2: NSupercomb myFst
 ]
 Dump [
Stk [
  37: Primitive: casePair CasePair
  39: NAp   37    3 (NData: 1  40 42 )
   1: NAp   39    2 (NSupercomb myFst)
 ]
 ]

  11) Stk [
  37: Primitive: casePair CasePair
  39: NAp   37    3 (NData: 1  40 42 )
   1: NAp   39    2 (NSupercomb myFst)
 ]
 Heap [
   3: NData: 1  40 42 
  16: Primitive: Pack PrimConstr {t = 1, a = 2}
  42: NNum 4
  41: NAp   16   40 (NNum 3)
  40: NNum 3
   1: NAp   39    2 (NSupercomb myFst)
  39: NAp   37    3 (NData: 1  40 42 )
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   2: NSupercomb myFst
 ]
 Dump [
 ]

  12) Stk [
   2: NSupercomb myFst
  43: NAp    2   40 (NNum 3)
   1: NAp   43   42 (NNum 4)
 ]
 Heap [
   1: NAp   43   42 (NNum 4)
  43: NAp    2   40 (NNum 3)
   3: NData: 1  40 42 
  16: Primitive: Pack PrimConstr {t = 1, a = 2}
  42: NNum 4
  41: NAp   16   40 (NNum 3)
  40: NNum 3
  39: NAp   37    3 (NData: 1  40 42 )
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   2: NSupercomb myFst
 ]
 Dump [
 ]

  13) Stk [
   1: NInd 40
 ]
 Heap [
   1: NInd 40
  43: NAp    2   40 (NNum 3)
   3: NData: 1  40 42 
  16: Primitive: Pack PrimConstr {t = 1, a = 2}
  42: NNum 4
  41: NAp   16   40 (NNum 3)
  40: NNum 3
  39: NAp   37    3 (NData: 1  40 42 )
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   2: NSupercomb myFst
 ]
 Dump [
 ]

  14) Stk [
  40: NNum 3
 ]
 Heap [
   1: NNum 3
  43: NAp    2   40 (NNum 3)
   3: NData: 1  40 42 
  16: Primitive: Pack PrimConstr {t = 1, a = 2}
  42: NNum 4
  41: NAp   16   40 (NNum 3)
  40: NNum 3
  39: NAp   37    3 (NData: 1  40 42 )
  38: Primitive: caseList CaseList
  37: Primitive: casePair CasePair
  36: Primitive: != NotEq
  35: Primitive: == Eq
  34: Primitive: <= LessEq
  33: Primitive: < Less
  32: Primitive: >= GreaterEq
  31: Primitive: > Greater
  30: Primitive: if If
  29: Primitive: / Div
  28: Primitive: * Mul
  27: Primitive: - Sub
  26: Primitive: + Add
  25: Primitive: negate Neg
  24: NSupercomb printCons
  23: NSupercomb printList
  22: NSupercomb tail
  21: NSupercomb head
  20: NSupercomb Cons
  19: NSupercomb Nil
  18: NSupercomb snd
  17: NSupercomb fst
  15: NSupercomb xor
  14: NSupercomb not
  13: NSupercomb or
  12: NSupercomb and
  11: NSupercomb True
  10: NSupercomb False
   9: NSupercomb twice
   8: NSupercomb compose
   7: NSupercomb S
   6: NSupercomb K1
   5: NSupercomb K
   4: NSupercomb I
   2: NSupercomb myFst
 ]
 Dump [
 ]



Total number of steps = 13
