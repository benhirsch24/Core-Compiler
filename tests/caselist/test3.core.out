   1) Stk [
   1: NSupercomb main
 ]
 Heap [
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  15: NSupercomb MkPair
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
   2: NSupercomb myPair
   1: NSupercomb main
 ]
 Dump [
 ]

   2) Stk [
   1: NAp   16    2 (NSupercomb myPair)
 ]
 Heap [
   1: NAp   16    2 (NSupercomb myPair)
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  15: NSupercomb MkPair
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
   2: NSupercomb myPair
 ]
 Dump [
 ]

   3) Stk [
  16: NSupercomb fst
   1: NAp   16    2 (NSupercomb myPair)
 ]
 Heap [
   1: NAp   16    2 (NSupercomb myPair)
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  15: NSupercomb MkPair
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
   2: NSupercomb myPair
 ]
 Dump [
 ]

   4) Stk [
   1: NAp   38    4 (NSupercomb K)
 ]
 Heap [
   1: NAp   38    4 (NSupercomb K)
  38: NAp   36    2 (NSupercomb myPair)
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  15: NSupercomb MkPair
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
   2: NSupercomb myPair
 ]
 Dump [
 ]

   5) Stk [
  38: NAp   36    2 (NSupercomb myPair)
   1: NAp   38    4 (NSupercomb K)
 ]
 Heap [
   1: NAp   38    4 (NSupercomb K)
  38: NAp   36    2 (NSupercomb myPair)
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  15: NSupercomb MkPair
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
   2: NSupercomb myPair
 ]
 Dump [
 ]

   6) Stk [
  36: Primitive: casePair CasePair
  38: NAp   36    2 (NSupercomb myPair)
   1: NAp   38    4 (NSupercomb K)
 ]
 Heap [
   1: NAp   38    4 (NSupercomb K)
  38: NAp   36    2 (NSupercomb myPair)
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  15: NSupercomb MkPair
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
   2: NSupercomb myPair
 ]
 Dump [
 ]

   7) Stk [
   2: NSupercomb myPair
 ]
 Heap [
   1: NAp   38    4 (NSupercomb K)
  38: NAp   36    2 (NSupercomb myPair)
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  15: NSupercomb MkPair
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
   2: NSupercomb myPair
 ]
 Dump [
Stk [
  36: Primitive: casePair CasePair
  38: NAp   36    2 (NSupercomb myPair)
   1: NAp   38    4 (NSupercomb K)
 ]
 ]

   8) Stk [
   2: NAp   40   41 (NNum 4)
 ]
 Heap [
   2: NAp   40   41 (NNum 4)
  41: NNum 4
  40: NAp   15   39 (NNum 3)
  39: NNum 3
   1: NAp   38    4 (NSupercomb K)
  38: NAp   36    2 (NAp 40 41)
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  15: NSupercomb MkPair
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
 ]
 Dump [
Stk [
  36: Primitive: casePair CasePair
  38: NAp   36    2 (NAp 40 41)
   1: NAp   38    4 (NSupercomb K)
 ]
 ]

   9) Stk [
  40: NAp   15   39 (NNum 3)
   2: NAp   40   41 (NNum 4)
 ]
 Heap [
   2: NAp   40   41 (NNum 4)
  41: NNum 4
  40: NAp   15   39 (NNum 3)
  39: NNum 3
   1: NAp   38    4 (NSupercomb K)
  38: NAp   36    2 (NAp 40 41)
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  15: NSupercomb MkPair
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
 ]
 Dump [
Stk [
  36: Primitive: casePair CasePair
  38: NAp   36    2 (NAp 40 41)
   1: NAp   38    4 (NSupercomb K)
 ]
 ]

  10) Stk [
  15: NSupercomb MkPair
  40: NAp   15   39 (NNum 3)
   2: NAp   40   41 (NNum 4)
 ]
 Heap [
   2: NAp   40   41 (NNum 4)
  41: NNum 4
  40: NAp   15   39 (NNum 3)
  39: NNum 3
   1: NAp   38    4 (NSupercomb K)
  38: NAp   36    2 (NAp 40 41)
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  15: NSupercomb MkPair
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
 ]
 Dump [
Stk [
  36: Primitive: casePair CasePair
  38: NAp   36    2 (NAp 40 41)
   1: NAp   38    4 (NSupercomb K)
 ]
 ]

  11) Stk [
  15: Primitive: Pack PrimConstr {t = 1, a = 2}
  40: NAp   15   39 (NNum 3)
   2: NAp   40   41 (NNum 4)
 ]
 Heap [
  15: Primitive: Pack PrimConstr {t = 1, a = 2}
   2: NAp   40   41 (NNum 4)
  41: NNum 4
  40: NAp   15   39 (NNum 3)
  39: NNum 3
   1: NAp   38    4 (NSupercomb K)
  38: NAp   36    2 (NAp 40 41)
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
 ]
 Dump [
Stk [
  36: Primitive: casePair CasePair
  38: NAp   36    2 (NAp 40 41)
   1: NAp   38    4 (NSupercomb K)
 ]
 ]

  12) Stk [
   2: NData: 1  39 41 
 ]
 Heap [
   2: NData: 1  39 41 
  15: Primitive: Pack PrimConstr {t = 1, a = 2}
  41: NNum 4
  40: NAp   15   39 (NNum 3)
  39: NNum 3
   1: NAp   38    4 (NSupercomb K)
  38: NAp   36    2 (NData: 1  39 41 )
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
 ]
 Dump [
Stk [
  36: Primitive: casePair CasePair
  38: NAp   36    2 (NData: 1  39 41 )
   1: NAp   38    4 (NSupercomb K)
 ]
 ]

  13) Stk [
  36: Primitive: casePair CasePair
  38: NAp   36    2 (NData: 1  39 41 )
   1: NAp   38    4 (NSupercomb K)
 ]
 Heap [
   2: NData: 1  39 41 
  15: Primitive: Pack PrimConstr {t = 1, a = 2}
  41: NNum 4
  40: NAp   15   39 (NNum 3)
  39: NNum 3
   1: NAp   38    4 (NSupercomb K)
  38: NAp   36    2 (NData: 1  39 41 )
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
 ]
 Dump [
 ]

  14) Stk [
   4: NSupercomb K
  42: NAp    4   39 (NNum 3)
   1: NAp   42   41 (NNum 4)
 ]
 Heap [
   1: NAp   42   41 (NNum 4)
  42: NAp    4   39 (NNum 3)
   2: NData: 1  39 41 
  15: Primitive: Pack PrimConstr {t = 1, a = 2}
  41: NNum 4
  40: NAp   15   39 (NNum 3)
  39: NNum 3
  38: NAp   36    2 (NData: 1  39 41 )
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
 ]
 Dump [
 ]

  15) Stk [
   1: NInd 39
 ]
 Heap [
   1: NInd 39
  42: NAp    4   39 (NNum 3)
   2: NData: 1  39 41 
  15: Primitive: Pack PrimConstr {t = 1, a = 2}
  41: NNum 4
  40: NAp   15   39 (NNum 3)
  39: NNum 3
  38: NAp   36    2 (NData: 1  39 41 )
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
 ]
 Dump [
 ]

  16) Stk [
  39: NNum 3
 ]
 Heap [
   1: NNum 3
  42: NAp    4   39 (NNum 3)
   2: NData: 1  39 41 
  15: Primitive: Pack PrimConstr {t = 1, a = 2}
  41: NNum 4
  40: NAp   15   39 (NNum 3)
  39: NNum 3
  38: NAp   36    2 (NData: 1  39 41 )
  37: Primitive: caseList CaseList
  36: Primitive: casePair CasePair
  35: Primitive: != NotEq
  34: Primitive: == Eq
  33: Primitive: <= LessEq
  32: Primitive: < Less
  31: Primitive: >= GreaterEq
  30: Primitive: > Greater
  29: Primitive: if If
  28: Primitive: / Div
  27: Primitive: * Mul
  26: Primitive: - Sub
  25: Primitive: + Add
  24: Primitive: negate Neg
  23: NSupercomb printCons
  22: NSupercomb printList
  21: NSupercomb tail
  20: NSupercomb head
  19: NSupercomb Cons
  18: NSupercomb Nil
  17: NSupercomb snd
  16: NSupercomb fst
  14: NSupercomb xor
  13: NSupercomb not
  12: NSupercomb or
  11: NSupercomb and
  10: NSupercomb True
   9: NSupercomb False
   8: NSupercomb twice
   7: NSupercomb compose
   6: NSupercomb S
   5: NSupercomb K1
   4: NSupercomb K
   3: NSupercomb I
 ]
 Dump [
 ]



Total number of steps = 15
